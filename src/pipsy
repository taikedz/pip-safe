#!/usr/bin/env bash

set -euo pipefail

### pipsy COMMAND [OPTIONS  ...] Usage:help
#
# Manage re-usable virtual environments.
#
# Set a virtual environment for pipsy, and it will be used for any subsequent pipsy command.
#
# The following are the special pipsy commands:
#
#   /ls /cv /use /rm
#
# pipsy /use VENVNAME
#   Set a virtual env name for subsequent pipsy executions.
#
# pipsy /ls
#   List available environments
#
# pipsy /cv
# pipsy
#   Print current virtual environment
#
# pipsy /rm VENVNAME
#   Remove an existing virtual environment
#
#
# Example:
#
#   # A venv for AWS CLI
#   pipsy /use awscli
#   pipsy pip install awscli
#   pipsy aws $AWSOPTIONS
#
#   pipsy bash my-automation-script.sh
#
#   # Switch to a youtube-dl space
#   pipsy /use ytdl
#   pipsy pip install youtube-dl
#   pipsy youtube-dl $URL
#
#   # Return to AWS CLI venv
#   pispy /use awscli
#
#
###/doc

#%include app/pyvenv.sh
#%include std/askuser.sh
#%include std/out.sh
#%include std/autohelp.sh

VENVSTORE="$HOME/.local/lib/pipsy"
VERSIONFILE="$VENVSTORE/python_version"
DEFAULTFILE="$VENVSTORE/default_venv"
ACTIVATORS=(
    Scripts/activate # Windows
    bin/activate # .. everyone else
)

$%function pipsy:ensure(*venv_path) {
    [[ ! "$venv_path" =~ ^/ ]] || out:fail "virutalenv name <$venv_path> cannot be an absolute path."
    venv_path="$VENVSTORE/$venv_path"

    for activator in "${ACTIVATORS[@]}"; do
        if [[ -f "$venv_path/$activator" ]]; then return; fi
    done

    if askuser:confirm "<$venv_path> is not a virtual environment - set one up?"; then
        mkdir -p "$venv_path"
        pyvenv:setup "$venv_path" "$PYTHONCMD"
    else
        out:fail "-- abort --"
    fi
}

pipsy:print_current_venv() {
    if [[ -f "$DEFAULTFILE" ]]; then
        echo "Target virtualenv is $(cat "$DEFAULTFILE")"
    else
        out:warn "No default virtualenv configured."
    fi
}

$%function pipsy:command_precheck(command *venv_var) {
    [[ -d "$VENVSTORE" ]] || mkdir -p "$VENVSTORE"

    pipsy:load_python_version

    if [[ "$command" = /use ]]; then
        local venv_name="${1}.venv"
        venv_var="$venv_name"
        pipsy:ensure venv_var
        echo "$venv_name" > "$DEFAULTFILE"
        exit

    elif [[ "$command" =~ ^/(list|ls)$ ]]; then
        (find "$VENVSTORE" -type d -name '*.venv' | sed -r "s:^$VENVSTORE/::" | grep -E '^') ||
            out:info "No virtual environments found"
        exit

    elif [[ "$command" = /cv ]]; then
        pipsy:print_current_venv
        exit

    elif [[ "$command" = /rm ]]; then
        [[ -n "${1:-}" ]] || out:fail "Please specify a venv to remove"
        if [[ -d "$VENVSTORE/$1" ]]; then
            rm -rf "$VENVSTORE/$1" || out:fail "- abort -"
            out:info "Removed <$1>"
        else
            out:warn "<$1> is not an existing virtual env"
        fi
        exit

    else
        venv_var=default
    fi
}

pipsy:load_python_version() {
    if [[ ! -f "$VERSIONFILE" ]]; then
        echo "python3" > "$VERSIONFILE"
    fi

    PYTHONCMD="$(cat "$VERSIONFILE")"
}

$%function pipsy:load_default_venv(*venv_var) {
    if [[ -f "$VENVSTORE/default_venv" ]]; then
        venv_var="$(cat "$VENVSTORE/default_venv")"
        VENV_NAME="$venv_var"
        pipsy:ensure venv_var
    else
        out:fail "You must set a default virtualenv - see 'pipsy set VENVNAME'"
    fi
}

$%function pipsy:activate(venv_path) {
    for activator in "${ACTIVATORS[@]}"; do
        if [[ -f "$venv_path/$activator" ]]; then
            . "$venv_path/$activator"
            return
        fi
    done

    out:fail "No activation script found for <$venv_path>"
}

$%function pipsy:in-venv-actions(venv) {
    pipsy:activate "$venv"

    out:info "Loaded virtualenv <$VENV_NAME>"
    # Run the command given
    "$@"

    pyvenv:deactivate
}

$%function pipsy:start(command) {
    local venv

    # Check if we are setting an overall virtualenv
    # If so, it will be set, and script will exit here
    pipsy:command_precheck "$command" venv "$@"

    # Check if there is a default venv file, and load it
    # If not, script will abort
    pipsy:load_default_venv venv

    # Actions that depend on an existing venv, taken care of prior
    pipsy:in-venv-actions "$venv" "$command" "$@"
}

pipsy:main() {
    autohelp:check "$@"

    if [[ -z "$*" ]]; then
        pipsy:print_current_venv
        exit
    fi
    pipsy:start "$@"
}

pipsy:main "$@"
